<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git常用操作大全</title>
      <link href="/2025/01/26/Git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%85%A8/"/>
      <url>/2025/01/26/Git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="1-创建版本库"><a href="#1-创建版本库" class="headerlink" title="1.创建版本库"></a>1.创建版本库</h3><p>在没有库的情况下，刚开始创建仓库的时候才需要。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><h3 id="2-提交到版本库"><a href="#2-提交到版本库" class="headerlink" title="2.提交到版本库"></a>2.提交到版本库</h3><p>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库</p><p>第二步，用命令<code>git commit</code>告诉Git，把文件提交到仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;test&quot;</span><br></pre></td></tr></table></figure><h3 id="3-查看状态"><a href="#3-查看状态" class="headerlink" title="3.查看状态"></a>3.查看状态</h3><p>运行<code>git status</code>命令看看结果</p><p>汇总显示工作区、暂存区与HEAD的差异：<code>git checkout</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"></span><br><span class="line">$ git checkout</span><br></pre></td></tr></table></figure><h3 id="4-查看修改内容"><a href="#4-查看修改内容" class="headerlink" title="4.查看修改内容"></a>4.查看修改内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br></pre></td></tr></table></figure><h3 id="5-查看提交日志"><a href="#5-查看提交日志" class="headerlink" title="5.查看提交日志"></a>5.查看提交日志</h3><p>用<code>git log</code>命令，或者<code>git log --pretty=oneline</code>命令（更简化清晰）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line"></span><br><span class="line">$ git log --pretty=oneline</span><br></pre></td></tr></table></figure><h3 id="6-版本回退"><a href="#6-版本回退" class="headerlink" title="6.版本回退"></a>6.版本回退</h3><p>使用命令<code>git reset --hard commit_id</code>，提交到远程<code>git push -f</code></p><p>用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard commit_id</span><br><span class="line">$ git push -f</span><br><span class="line"></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h3 id="7-工作区和暂存区"><a href="#7-工作区和暂存区" class="headerlink" title="7.工作区和暂存区"></a>7.工作区和暂存区</h3><p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><h3 id="8-撤销修改"><a href="#8-撤销修改" class="headerlink" title="8.撤销修改"></a>8.撤销修改</h3><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000">版本回退</a>一节，不过前提是没有推送到远程库。</p><p>场景4：已经提交了不适合的修改到版本库时，同时又不想用<code>reset</code>操作，则可以使用&#96; git revert &#96;&#96;提交的版本号&#96;&#96;&#96;</p><p>场景5：撤销一次远程的合并:<code>git revert –m 1 ``合并的版本号``</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout file</span><br><span class="line"></span><br><span class="line">$ git reset HEAD file</span><br><span class="line"></span><br><span class="line">$ git revert commit_id</span><br><span class="line"></span><br><span class="line">$ git revert –m 1 merge_commit_id</span><br></pre></td></tr></table></figure><h3 id="9-删除文件"><a href="#9-删除文件" class="headerlink" title="9.删除文件"></a>9.删除文件</h3><p>用命令<code>git rm</code>删掉，并且<code>git commit</code></p><p>需要恢复的话，参考撤销修改：<code>git reset HEAD file</code>与<code>git checkout -- file</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm file</span><br></pre></td></tr></table></figure><h3 id="10-远程仓库"><a href="#10-远程仓库" class="headerlink" title="10.远程仓库"></a>10.远程仓库</h3><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，就可以使用命令<code>git push origin master</code>推送最新修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@server-name:path/repo-name.git</span><br><span class="line"></span><br><span class="line">$ git push -u origin master</span><br><span class="line"></span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><h3 id="11-从远程库克隆"><a href="#11-从远程库克隆" class="headerlink" title="11.从远程库克隆"></a>11.从远程库克隆</h3><p>使用<code>git clone &lt;url&gt;</code>命令克隆。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &lt;url&gt;</span><br></pre></td></tr></table></figure><h3 id="12-分支管理"><a href="#12-分支管理" class="headerlink" title="12.分支管理"></a>12.分支管理</h3><p>查看分支：<code>git branch</code></p><p>创建本地分支：<code>git branch &lt;name&gt; origin/master(``基于``master``创建分支``)</code></p><p>把新建本地分支提交到远程：<code>git push origin &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>禁用Fast forward模式的合并：<code>git merge –no-ff &lt;name&gt;</code></p><p>删除本地分支：&#96;git branch -d <name><code>（</code>-D&#96;&#96;强制删除）&#96;&#96;&#96;</p><p>删除远程分支：<code>git push –d origin &lt;name&gt;</code></p><p>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin&#x2F;branch-name，本地和远程分支的名称最好一致；</p><p>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin&#x2F;branch-name。或者git branch –set-upstream-to&#x3D;origin&#x2F;branch-name</p><p>取消本地与远程分支的关联，使用git branch –-unset-upstream branch-name</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line">$ git branch &lt;name&gt; origin/master</span><br><span class="line">$ git push origin &lt;name&gt;</span><br><span class="line"></span><br><span class="line">$ git checkout &lt;name&gt;</span><br><span class="line">$ git checkout -b &lt;name&gt;</span><br><span class="line"></span><br><span class="line">$ git merge &lt;name&gt;</span><br><span class="line">$ git merge –no-ff &lt;name&gt;</span><br><span class="line"></span><br><span class="line">$ git branch -d &lt;name&gt;</span><br><span class="line">$ git push –d origin &lt;name&gt;</span><br><span class="line"></span><br><span class="line">$ git checkout -b branch-name origin/branch-name</span><br><span class="line"></span><br><span class="line">$ git branch --set-upstream branch-name origin/branch-name</span><br><span class="line">$ git branch --set-upstream-to=origin/branch-name</span><br><span class="line">$ git branch –-unset-upstream branch-name</span><br></pre></td></tr></table></figure><h3 id="13-解决冲突"><a href="#13-解决冲突" class="headerlink" title="13.解决冲突"></a>13.解决冲突</h3><p>切换到master分支：<code>git checkout master</code></p><p>合并其他分支：<code>git merge &lt;name&gt;</code></p><p>冲突后查看：<code>git status</code> 以及git log –graph –pretty&#x3D;oneline –abbrev-commit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><h3 id="14-保存当前未完成的分支，但并不提交"><a href="#14-保存当前未完成的分支，但并不提交" class="headerlink" title="14.保存当前未完成的分支，但并不提交"></a>14.保存当前未完成的分支，但并不提交</h3><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再用<code>git stash list</code>查看，用<code>git stash pop</code>或者git stash apply <name>恢复、git stash drop删除，回到工作现场。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line"></span><br><span class="line">$ git stash list</span><br><span class="line"></span><br><span class="line">$ git stash pop</span><br><span class="line">$ git stash apply &lt;name&gt;</span><br><span class="line">$ git stash drop</span><br></pre></td></tr></table></figure><h3 id="15-标签管理"><a href="#15-标签管理" class="headerlink" title="15.标签管理"></a>15.标签管理</h3><p>·    命令<code>git tag &lt;name&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</p><p>·    <code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</p><p>·    <code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签；</p><p>·    命令<code>git tag</code>可以查看所有标签。</p><p>·    命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</p><p>·    命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</p><p>·    命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</p><p>·    命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签</p><h3 id="16-配置别名"><a href="#16-配置别名" class="headerlink" title="16.配置别名"></a>16.配置别名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.st status</span><br></pre></td></tr></table></figure><p>那么<code>git st</code>就代表<code>git status</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg &quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit --date=iso&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
